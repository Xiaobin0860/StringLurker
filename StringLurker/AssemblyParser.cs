/*
 * Created by SharpDevelop.
 * User: User
 * Date: 10.02.2022
 * Time: 23:00
 * 
 * To change this template use Tools | Options | Coding | Edit Standard Headers.
 */
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using Mono.Cecil;
using Mono.Cecil.Cil;

namespace StringLurker
{
	/// <summary>
	/// Description of AssemblyParser.
	/// </summary>
	public class AssemblyParser
	{
		private AssemblyDefinition assembly = null;
		private Dictionary<string,string> mapping = null;
		private const string SpecialSymbol = "⇨";
		
		public AssemblyParser(string filename)
		{
			var resolver = new DefaultAssemblyResolver();
			resolver.AddSearchDirectory(Path.GetDirectoryName(filename));
			
			assembly = AssemblyDefinition.ReadAssembly(filename, new ReaderParameters { AssemblyResolver = resolver });
		}
		
		public void FindExcelClasses() 
		{
			mapping = new Dictionary<string, string>();
			
			var found_classes = 0;
			
			var types = GetTypes();
			
			foreach (var t in types) {
				string excel_name = null;
				if (IsExcelLoader(t, out excel_name)) {
					var excel_class_name = FindExcelClassName(t);
					Console.WriteLine("FOUND EXCEL CLASS: {0} => '{1}'", excel_class_name, excel_name);
					mapping.Add(excel_class_name, excel_name);
					found_classes++;
				}
			}
			
			Console.WriteLine("Total Excel classes found: {0}", found_classes);
		}
		
		public void DumpNametrans(string filename) {
			var w = new StreamWriter(filename);
			
			w.WriteLine("#Autogenerated nameTranslation for ExcelConfigData class names");
			w.WriteLine(string.Format("#Assembly: {0}", assembly.FullName));
			w.WriteLine(string.Format("#Date: {0}", DateTime.Now));
			
			foreach (var entry in mapping) {
				w.WriteLine(string.Format("{0}{1}MoleMole.Config.{2}", entry.Key, SpecialSymbol, entry.Value));
			}
			
			w.WriteLine();
			
			w.Close();
		}
		
		private bool IsExcelLoader(TypeDefinition t, out string excel_name) {
			excel_name = null;
			
			foreach (var m in t.Methods) {
				if (m.Body == null) {
					//Console.WriteLine("Method {0} has no body", m.Name);
					continue;
				}
				
				foreach (var i in m.Body.Instructions) {
					if (i.OpCode == OpCodes.Ldstr) {
						string op = i.Operand.ToString();
						if (op.EndsWith("ExcelConfig") || op.EndsWith("ExcelConfigData")) {
							//Console.WriteLine("{0}: {1} => {2}", t.Name, m.Name, op);
							excel_name = TransformExcelName(op);
							return true;
						}
					}
				}
			}
			
			return false;
		}
		
		private string FindExcelClassName(TypeDefinition t) {
			var dict_name = "System.Collections.Generic.Dictionary`2"; // TODO: hack!
			var list_name = "System.Collections.Generic.List`1"; // TODO: hack!
			
			// There're several dicts, we need to find the one
			// Also some loaders have Lists instead of dicts
			string name = FindCollectionWithGenericArgument(t, dict_name, 1);
			
			if (name == null) {
				name = FindCollectionWithGenericArgument(t, list_name, 0);
			}
			
			if (name != null)
				return name;
			
			throw new InvalidDataException(string.Format("Type {0} is missing expected Dict!", t.Name));
		}
		
		private string FindCollectionWithGenericArgument(TypeDefinition t, string collection_name, int arg_id) {
			foreach (var field in t.Fields) {
				if (!field.IsPrivate)
					continue;
				if (!field.IsStatic)
					continue;
				
				var ft = field.FieldType;
				
				if (!ft.FullName.StartsWith(collection_name))
					continue;
				if (!ft.IsGenericInstance)
					continue;
				
				var gi = ft as GenericInstanceType;
				
				var arguments = gi.GenericArguments.ToArray();
				
				if (arguments.Count() <= arg_id) {
					throw new InvalidDataException(string.Format("Type {0} have fucked-up generic!", t.Name));
				}
				
				if (arguments[arg_id].FullName.StartsWith("System")) {
					// Skip it
					continue;
				}
				
				return arguments[arg_id].FullName;
			}
			
			return null;
		}
		
		private TypeDefinition[] GetTypes()
		{
			return assembly.MainModule.Types.ToArray();
		}
		
		private string TransformExcelName(string name) {
			name = Path.GetFileName(name);
			
			if (name.EndsWith("ExcelConfigData"))
				name = name.Substring(0, name.Length-4);
			
			return name;
		}
	}
}
